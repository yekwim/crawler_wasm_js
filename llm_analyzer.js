#!/usr/bin/env node

/**
 * Script de Inicializa√ß√£o - Analisador Pronto para LLM
 * 
 * Este script executa o analisador completo que gera dados estruturados
 * otimizados para classifica√ß√£o por LLM:
 * 
 * 1. Crawler - Baixa ficheiros JavaScript e WASM
 * 2. AST Parser - An√°lise estrutural profunda
 * 3. Pipeline Integrado - Combina an√°lises
 * 4. Dados Estruturados - JSON otimizado para LLM
 */

const { LLMReadyAnalyzer } = require('./src/llm_ready_index.js');

// Cores para output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logHeader(message) {
  log(`\n${'='.repeat(60)}`, 'cyan');
  log(`  ${message}`, 'bright');
  log(`${'='.repeat(60)}`, 'cyan');
}

// Fun√ß√£o principal
async function main() {
  logHeader('ü§ñ ANALISADOR PRONTO PARA LLM');
  log('Sistema de An√°lise Completa para Classifica√ß√£o por LLM', 'yellow');
  log('Vers√£o 2.0.0 - Crawler + AST Parser + Pipeline Integrado', 'blue');
  
  // Verificar argumentos
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    log('\nüìã USO:', 'bright');
    log('  node llm_analyzer.js <url> [maxDepth] [outputDir]', 'yellow');
    log('\nüìù EXEMPLOS:', 'bright');
    log('  node llm_analyzer.js https://webdollar.io', 'green');
    log('  node llm_analyzer.js https://example.com 2', 'green');
    log('  node llm_analyzer.js https://suspicious-site.com 1 ./my_analysis', 'green');
    log('\nüîß FUNCIONALIDADES:', 'bright');
    log('  ‚úÖ Crawler autom√°tico de ficheiros JS/WASM', 'green');
    log('  ‚úÖ An√°lise AST profunda e estruturada', 'green');
    log('  ‚úÖ Pipeline integrado com m√∫ltiplas an√°lises', 'green');
    log('  ‚úÖ Dados JSON otimizados para LLM', 'green');
    log('  ‚úÖ Detec√ß√£o de mining e ofusca√ß√£o', 'green');
    log('  ‚úÖ An√°lise de seguran√ßa e padr√µes', 'green');
    log('  ‚úÖ Relat√≥rios detalhados em m√∫ltiplos formatos', 'green');
    log('\nüìä SA√çDA:', 'bright');
    log('  üìÅ llm_ready_data/ - Dados estruturados para LLM', 'blue');
    log('  üìÅ ast_analysis/ - An√°lise AST detalhada', 'blue');
    log('  üìÅ integrated_analysis/ - Pipeline integrado', 'blue');
    log('  üìÅ reports/ - Relat√≥rios em texto', 'blue');
    process.exit(1);
  }
  
  const url = args[0];
  const maxDepth = parseInt(args[1]) || 1;
  const outputDir = args[2] || './llm_analysis_output';
  
  log(`\nüåê URL: ${url}`, 'bright');
  log(`üìÅ Diret√≥rio de sa√≠da: ${outputDir}`, 'bright');
  log(`üîç Profundidade m√°xima: ${maxDepth}`, 'bright');
  
  // Criar analisador
  const analyzer = new LLMReadyAnalyzer({ outputDir });
  
  try {
    log('\nüöÄ Iniciando an√°lise completa...', 'yellow');
    const startTime = Date.now();
    
    // Executar an√°lise
    const results = await analyzer.analyzeWebsite(url, maxDepth);
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    log(`\n‚úÖ An√°lise conclu√≠da em ${duration.toFixed(2)}s!`, 'green');
    
    // Mostrar resumo dos resultados
    log('\nüìä RESUMO DOS RESULTADOS:', 'bright');
    log(`üìÅ Total de ficheiros: ${results.metadata.totalFiles}`, 'blue');
    log(`üìÑ JavaScript: ${results.metadata.jsFiles}`, 'blue');
    log(`üîß WebAssembly: ${results.metadata.wasmFiles}`, 'blue');
    log(`‚õèÔ∏è Mining detectado: ${results.summary.mining.detected}`, results.summary.mining.detected > 0 ? 'red' : 'green');
    log(`üîí Ofusca√ß√£o detectada: ${results.summary.obfuscation.detected}`, results.summary.obfuscation.detected > 0 ? 'yellow' : 'green');
    log(`üõ°Ô∏è Ficheiros suspeitos: ${results.summary.security.suspicious}`, results.summary.security.suspicious > 0 ? 'red' : 'green');
    
    // Mostrar ficheiros com problemas
    if (results.summary.mining.detected > 0) {
      log('\nüö® FICHEIROS COM MINING DETECTADO:', 'red');
      results.summary.mining.files.forEach(file => {
        log(`  ‚Ä¢ ${file}`, 'red');
      });
    }
    
    if (results.summary.obfuscation.detected > 0) {
      log('\n‚ö†Ô∏è FICHEIROS OFUSCADOS:', 'yellow');
      results.summary.obfuscation.files.forEach(file => {
        log(`  ‚Ä¢ ${file}`, 'yellow');
      });
    }
    
    // Mostrar localiza√ß√£o dos dados
    log('\nüìÅ DADOS GERADOS:', 'bright');
    log(`ü§ñ Dados para LLM: ${outputDir}/llm_ready_data/`, 'cyan');
    log(`üß† An√°lise AST: ${outputDir}/ast_analysis/`, 'cyan');
    log(`üîÑ Pipeline Integrado: ${outputDir}/integrated_analysis/`, 'cyan');
    log(`üìä Relat√≥rios: ${outputDir}/reports/`, 'cyan');
    
    // Mostrar pr√≥ximos passos
    log('\nüéØ PR√ìXIMOS PASSOS:', 'bright');
    log('1. Consulte os relat√≥rios em texto para an√°lise manual', 'blue');
    log('2. Use os dados JSON estruturados para classifica√ß√£o por LLM', 'blue');
    log('3. Analise os ficheiros CSV para estat√≠sticas', 'blue');
    log('4. Verifique os ficheiros com mining/ofusca√ß√£o detectados', 'blue');
    
    log('\nüéâ An√°lise completa! Dados prontos para LLM.', 'green');
    
  } catch (error) {
    log(`\n‚ùå Erro na an√°lise: ${error.message}`, 'red');
    console.error(error);
    process.exit(1);
  }
}

// Executar
main().catch(console.error);
